name: Java CI with Maven Test # 워크플로우 이름 (테스트용임을 명시)

on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 트리거
  pull_request:
    branches: [ "main" ] # PR 시에도 빌드되도록 유지

jobs:
  build: # 빌드 잡: 프로젝트를 빌드하고 JAR 파일을 아티팩트로 저장
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml -DskipTests # 테스트를 건너뛰어 빌드 시간 단축 (선택 사항)

    # 빌드된 JAR 파일을 다음 잡에서 사용할 수 있도록 아티팩트로 업로드합니다.
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: budgets-backend-jar
        path: target/*.jar

    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  deploy: # 배포 잡: 빌드된 JAR 파일을 리눅스 서버로 배포 시도 (여기서는 테스트 목적)
    runs-on: ubuntu-latest
    needs: build # build 잡이 성공적으로 완료된 후에 실행됩니다.
    
    steps:
      - name: Download JAR artifact # build 잡에서 업로드한 JAR 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: budgets-backend-jar
          path: ./downloaded-jar # 다운로드될 JAR 파일이 저장될 로컬 경로

      - name: Verify downloaded JAR # 다운로드된 JAR 파일 확인 (테스트 목적)
        run: |
          ls -lh ./downloaded-jar/
          echo "다운로드된 JAR 파일의 내용은 다음과 같습니다:"
          find ./downloaded-jar -name "*.jar" -exec du -h {} \;

      - name: Execute remote SSH command (for test only) # SSH 연결 테스트만 수행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }} # SSH_PRIVATE_KEY가 아니라 SSH_PORT여야 합니다.
          script: |
            echo "SSH 연결 테스트 중..."
            whoami
            echo "SSH 연결 테스트 완료!"
