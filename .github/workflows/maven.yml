name: Java CI with Maven # 워크플로우 이름

on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 트리거
  pull_request:
    branches: [ "main" ] # PR 시에도 빌드되도록 유지 (배포는 PR에서는 보통 안 함)

jobs:
  build: # 빌드 잡: 프로젝트를 빌드하고 JAR 파일을 아티팩트로 저장
    runs-on: ubuntu-latest
    permissions:
      contents: write # Dependabot Dependency Graph 제출을 위함 (필수)

    steps:
    - uses: actions/checkout@v4 # 코드 체크아웃
    - name: Set up JDK 17 # JDK 17 설정
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven # Maven 빌드 실행
      run: mvn -B package --file pom.xml

    # 이 부분이 중요합니다! 빌드된 JAR 파일을 다음 잡 (deploy 잡)에서 사용할 수 있도록 아티팩트로 업로드합니다.
    - name: Upload JAR artifact # JAR 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: budgets-backend-jar # 아티팩트 이름 (deploy 잡에서 이 이름으로 다운로드합니다)
        path: target/*.jar

    - name: Update dependency graph # 종속성 그래프 제출 (기존 기능 유지)
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  deploy: # 배포 잡: 빌드된 JAR 파일을 리눅스 서버로 배포
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.3.0

      - name: execute remote ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            whoami
