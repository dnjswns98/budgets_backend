name: Java CI with Maven # 워크플로우 이름

on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 트리거
  pull_request:
    branches: [ "main" ] # PR 시에도 빌드되도록 유지 (배포는 PR에서는 보통 안 함)

jobs:
  build: # 빌드 잡: 프로젝트를 빌드하고 JAR 파일을 아티팩트로 저장
    runs-on: ubuntu-latest
    permissions:
      contents: write # Dependabot Dependency Graph 제출을 위함 (필수)

    steps:
    - uses: actions/checkout@v4 # 코드 체크아웃
    - name: Set up JDK 17 # JDK 17 설정
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven # Maven 빌드 실행
      run: mvn -B package --file pom.xml

    # 이 부분이 중요합니다! 빌드된 JAR 파일을 다음 잡 (deploy 잡)에서 사용할 수 있도록 아티팩트로 업로드합니다.
    - name: Upload JAR artifact # JAR 아티팩트 업로드
      uses: actions/upload-artifact@v4
      with:
        name: budgets-backend-jar # 아티팩트 이름 (deploy 잡에서 이 이름으로 다운로드합니다)
        path: target/*.jar

    - name: Update dependency graph # 종속성 그래프 제출 (기존 기능 유지)
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  deploy: # 배포 잡: 빌드된 JAR 파일을 리눅스 서버로 배포
    needs: build # build 잡이 성공적으로 완료된 후에야 이 deploy 잡이 실행됩니다.
    runs-on: ubuntu-latest # 배포를 위한 런너 환경
    environment: production # 선택 사항: 배포 환경을 지정하여 Secret 관리 및 승인 절차를 강화할 수 있습니다.

    steps:
      - name: Download JAR artifact # build 잡에서 업로드한 JAR 파일을 다운로드합니다.
        uses: actions/download-artifact@v4
        with:
          name: budgets-backend-jar
          path: ./downloaded-jar

      # SSH 호스트 키 확인 비활성화를 위한 SSH config 파일 생성
      - name: Create SSH config for Host Key Checking # SSH config 파일 생성
        run: |
          mkdir -p ~/.ssh/
          echo "Host ${{ secrets.SSH_HOST }}" >> ~/.ssh/config
          echo "  Hostname ${{ secrets.SSH_HOST }}" >> ~/.ssh/config
          echo "  Port 5555" >> ~/.ssh/config
          echo "  User ${{ secrets.SSH_USERNAME }}" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config # known_hosts 파일을 사용하지 않음
          chmod 600 ~/.ssh/config # config 파일 권한 설정 (필수)
        env:
          # config 내용에 secrets가 포함되므로 env를 통해 안전하게 접근
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}

      - name: Deploy to Personal Linux Server via SSH # SSH를 통한 배포 스텝
        uses: appleboy/ssh-action@master # SSH 접속 및 명령 실행을 위한 GitHub Action
        with:
          host: ${{ secrets.SSH_HOST }} # 서버 IP 주소 또는 도메인 (GitHub Secret에서 가져옴)
          username: ${{ secrets.SSH_USERNAME }} # 서버 접속 사용자 이름 (GitHub Secret에서 가져옴)
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH 개인 키 (GitHub Secret에서 가져옴)
          port: 5555
          # StrictHostKeyChecking은 ~/.ssh/config에서 처리되므로 여기서는 제거
          # passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }} # 만약 개인 키에 암호가 있다면 이 줄도 추가하고 Secret에 암호 등록
          script: |
            echo "--- 배포 시작 ---"

            # 1. 서버에 배포될 디렉토리가 없으면 생성합니다.
            # APP_PATH는 GitHub Secret에 설정한 /home/deployer/budgets-backend 와 같은 경로입니다.
            mkdir -p "${{ secrets.APP_PATH }}" # 경로를 큰따옴표로 묶습니다.
            echo "배포 디렉토리 확인/생성 완료: ${{ secrets.APP_PATH }}"

            # 2. 다운로드된 JAR 파일을 서버의 배포 경로로 복사합니다.
            # downloaded-jar/ 안에는 실제 JAR 파일이 있습니다. (예: budgets_backend-0.0.1-SNAPSHOT.jar)
            # JAR_NAME은 GitHub Secret에 설정한 JAR 파일의 정확한 이름입니다.
            # 경로들을 큰따옴표로 묶어줍니다.
            cp "./downloaded-jar/${{ secrets.JAR_NAME }}" "${{ secrets.APP_PATH }}/${{ secrets.JAR_NAME }}"
            echo "JAR 파일이 서버의 ${{ secrets.APP_PATH }} 경로로 복사되었습니다: ${{ secrets.JAR_NAME }}"

            # 3. (선택 사항) 이전 버전 백업 (배포 실패 시 롤백 용이)
            # if [ -f "${{ secrets.APP_PATH }}/${{ secrets.JAR_NAME }}.old" ]; then
            #   rm "${{ secrets.APP_PATH }}/${{ secrets.JAR_NAME }}.old"
            # fi
            # if [ -f "${{ secrets.APP_PATH }}/${{ secrets.JAR_NAME }}" ]; then
            #   mv "${{ secrets.APP_PATH }}/${{ secrets.JAR_NAME }}" "${{ secrets.APP_PATH }}/${{ secrets.JAR_NAME }}.old"
            # fi

            # 4. 애플리케이션 재시작 (systemd 서비스 사용 시 권장)
            # 'budgets-backend.service'는 서버에 설정한 systemd 서비스 이름이어야 합니다.
            # sudoers 파일에 해당 사용자가 비밀번호 없이 이 명령을 실행할 수 있도록 설정해야 합니다.
            echo "애플리케이션 서비스를 재시작합니다..."
            sudo systemctl restart budgets-backend.service || { echo "ERROR: 서비스 재시작 실패. 서버에서 systemctl status budgets-backend.service 명령으로 상태 확인."; exit 1; }
            echo "서비스 재시작 명령 전송 완료."
            
            # 5. (선택 사항) 서비스 시작 후 잠시 대기 및 상태 확인
            sleep 10 # 서비스가 완전히 시작될 시간을 대기 (필요에 따라 조정)
            echo "서비스 상태를 확인합니다..."
            sudo systemctl status budgets-backend.service | head -n 10 # 서비스 로그 상위 10줄 확인 (상태와 최근 로그)
            
            echo "--- 배포 완료 ---"
