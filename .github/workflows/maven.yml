name: Java CI with Maven # 워크플로우 이름

on:
  push:
    branches: [ "main" ] # main 브랜치에 코드를 푸시할 때 워크플로우 실행
  pull_request:
    branches: [ "main" ] # PR 시에도 워크플로우 실행 (배포는 PR에서 보통 제외)

jobs:
  build: # 빌드 잡: 프로젝트를 빌드하고 JAR 파일을 아티팩트로 저장
    runs-on: ubuntu-latest # GitHub Actions 런너 환경
    permissions:
      contents: write # Dependabot Dependency Graph 제출에 필요

    steps:
    - uses: actions/checkout@v4 # 저장소 코드 체크아웃
    - name: Set up JDK 17
      uses: actions/setup-java@v4 # JDK 17 설정
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven # Maven 캐시 활성화

    - name: Build with Maven
      run: mvn -B package --file pom.xml # Maven 빌드 실행 (JAR 파일 생성)

    # 빌드된 JAR 파일을 다음 잡 (deploy 잡)에서 사용할 수 있도록 아티팩트로 업로드합니다.
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: budgets-backend-jar # 아티팩트 이름 (deploy 잡에서 이 이름으로 다운로드합니다)
        path: target/*.jar # 일반적으로 `target/*.jar`는 빌드된 JAR 파일을 자동으로 찾아 업로드합니다.

    - name: Update dependency graph # 종속성 그래프 제출 (기존 기능 유지)
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  deploy: # 배포 잡: 빌드된 JAR 파일을 리눅스 서버로 배포
    needs: build # 'build' 잡이 성공적으로 완료된 후에만 이 'deploy' 잡이 실행됩니다.
    runs-on: ubuntu-latest # 배포를 위한 런너 환경
    environment: production # 선택 사항: 배포 환경을 지정 (Secret 관리 및 승인 절차 강화에 유용)

    steps:
      - name: Download JAR artifact # 'build' 잡에서 업로드한 JAR 파일을 다운로드합니다.
        uses: actions/download-artifact@v4
        with:
          name: budgets-backend-jar # build 잡에서 지정한 아티팩트 이름과 동일해야 합니다.
          path: ./downloaded-jar # JAR 파일이 다운로드될 GitHub Actions 런너의 임시 경로

      - name: Verify JAR on Runner before SCP # SCP 전 런너에 JAR 파일이 있는지 확인 (디버깅 유지)
        run: |
          echo "현재 런너 워킹 디렉토리: $(pwd)"
          echo "다운로드 디렉토리 내용 (./downloaded-jar/):"
          ls -l ./downloaded-jar/
          echo "예상 JAR 파일 경로: ./downloaded-jar/budgets_backend-0.0.1-SNAPSHOT.jar"
          echo "예상 JAR 파일 존재 여부 확인:"
          ls -l "./downloaded-jar/budgets_backend-0.0.1-SNAPSHOT.jar" || echo "파일을 찾을 수 없습니다!"
          echo "find 명령어로 전체 검색 (혹시 다른 곳에 있는지):"
          find . -name "*.jar"

      - name: Deploy to Personal Linux Server via SSH # SSH를 통한 배포 스텝
        uses: appleboy/ssh-action@master # SSH 접속 및 명령 실행을 위한 GitHub Action
        with:
          host: ${{ secrets.SSH_HOST }} # 서버 IP 주소 또는 도메인 (GitHub Secret에서 가져옴)
          username: ${{ secrets.SSH_USERNAME }} # 서버 접속 사용자 이름 (GitHub Secret에서 가져옴)
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH 개인 키 (GitHub Secret에서 가져옴)
          port: ${{ secrets.SSH_PORT }} # <--- 중요: SSH 포트 (Secret으로 관리)

          # --- 파일 전송 (scp_src/scp_dest) ---
          # GitHub Actions 런너에 다운로드된 JAR 파일의 소스 경로
          # JAR 파일 이름을 직접 명시합니다. (이전 로그에서 정확한 이름 확인됨)
          scp_src: "./downloaded-jar/budgets_backend-0.0.1-SNAPSHOT.jar"
          
          # 리눅스 서버의 목적지 경로 (디렉토리까지만 지정)
          # appleboy/ssh-action이 파일 이름을 자동으로 유지하도록 합니다.
          scp_dest: "${{ secrets.APP_PATH }}" # 파일명 없이 디렉토리만 지정
          
          # SCP 전송이 실패하면 스텝을 실패 처리하도록 명시합니다.
          scp_only: true # <--- 이 라인 추가!

          # script 블록은 파일 복사 명령 없이 다른 서버 명령만 포함합니다.
          # scp_only: true 일 때 script 블록은 실행되지 않으므로,
          # script 내용은 별도의 run 스텝으로 분리하는 것이 좋습니다.
          # 하지만 현재는 SCP 전송 성공 여부 확인이 우선이므로 그대로 둡니다.
          script: |
            echo "--- 배포 시작 (원격 스크립트) ---"

            # 1. 서버에 배포될 디렉토리가 없으면 생성합니다. (서버에서 실행)
            mkdir -p ${{ secrets.APP_PATH }}
            echo "배포 디렉토리 확인/생성 완료: ${{ secrets.APP_PATH }}"

            # --- JAR 파일 존재 여부 디버깅 시작 (서버) ---
            # SCP 성공 시 이 ls 명령에서 파일이 보여야 합니다.
            echo "서버 배포 경로 (${{ secrets.APP_PATH }}) 내용:"
            ls -l ${{ secrets.APP_PATH }}/
            echo "서버에 복사된 JAR 파일 (${{ secrets.APP_PATH }}/budgets_backend-0.0.1-SNAPSHOT.jar) 확인:"
            ls -l ${{ secrets.APP_PATH }}/budgets_backend-0.0.1-SNAPSHOT.jar || echo "서버에서 JAR 파일을 찾을 수 없습니다!"
            # --- JAR 파일 존재 여부 디버깅 끝 ---

            # 2. 애플리케이션 재시작 (systemd 서비스 사용 시 권장) (서버에서 실행)
            echo "애플리케이션 서비스를 재시작합니다..."
            sudo systemctl daemon-reload
            sudo systemctl restart budgets-backend.service || { echo "ERROR: 서비스 재시작 실패. 서버에서 systemctl status budgets-backend.service 명령으로 상태 확인."; exit 1; }
            echo "서비스 재시작 명령 전송 완료."
            
            # 3. (선택 사항) 서비스 시작 후 잠시 대기 및 상태 확인 (서버에서 실행)
            sleep 10
            echo "서비스 상태를 확인합니다..."
            sudo systemctl status budgets-backend.service | head -n 10
            
            echo "--- 배포 완료 (원격 스크립트) ---"
