ame: Java CI with Maven # 워크플로우 이름

on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 트리거
  pull_request:
    branches: [ "main" ] # PR 시에도 빌드되도록 유지 (배포는 PR에서는 보통 안 함)

jobs:
  build: # 빌드 잡: 프로젝트를 빌드하고 JAR 파일을 아티팩트로 저장
    runs-on: ubuntu-latest
    permissions:
      contents: write # Dependabot Dependency Graph 제출을 위함 (필수)

    steps:
    - uses: actions/checkout@v4 # 코드 체크아웃
    - name: Set up JDK 17
      uses: actions/setup-java@v4 # JDK 17 설정
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml # Maven 빌드 실행

    # 이 부분이 중요합니다! 빌드된 JAR 파일을 다음 잡 (deploy 잡)에서 사용할 수 있도록 아티팩트로 업로드합니다.
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: budgets-backend-jar # 아티팩트 이름 (deploy 잡에서 이 이름으로 다운로드합니다)
        path: target/*.jar

    - name: Update dependency graph # 종속성 그래프 제출 (기존 기능 유지)
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  deploy: # 배포 잡: 빌드된 JAR 파일을 리눅스 서버로 배포
    needs: build # build 잡이 성공적으로 완료된 후에만 이 deploy 잡이 실행됩니다.
    runs-on: ubuntu-latest # 배포를 위한 런너 환경
    environment: production # 선택 사항: 배포 환경을 지정하여 Secret 관리 및 승인 절차를 강화할 수 있습니다.

    steps:
      - name: Download JAR artifact # build 잡에서 업로드한 JAR 파일을 다운로드합니다.
        uses: actions/download-artifact@v4
        with:
          name: budgets-backend-jar # build 잡에서 지정한 아티팩트 이름과 동일해야 합니다.
          path: ./downloaded-jar # JAR 파일이 다운로드될 GitHub Actions 런너의 임시 경로

      # === 이 부분을 수정합니다: SSH 개인 키를 ssh-agent에 추가하는 액션 ===
      - name: Add SSH key to agent
        uses: webfactory/ssh-agent@v0.8.0 # ssh-agent 액션 사용
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # GitHub Secret에서 개인 키 가져오기
          # passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }} # 만약 개인 키에 암호가 있다면 이 줄을 추가하고 Secret에 암호 등록

      - name: Deploy to Personal Linux Server via SSH # SSH를 통한 배포 스텝
        uses: appleboy/ssh-action@master # SSH 접속 및 명령 실행을 위한 GitHub Action
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          # key: ${{ secrets.SSH_PRIVATE_KEY }} # <-- 이 줄은 더 이상 필요 없습니다. ssh-agent가 키를 제공합니다.
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "--- 배포 시작 ---"
            mkdir -p ${{ secrets.APP_PATH }}
            echo "배포 디렉토리 확인/생성 완료: ${{ secrets.APP_PATH }}"
            cp ./downloaded-jar/${{ secrets.JAR_NAME }} ${{ secrets.APP_PATH }}/${{ secrets.JAR_NAME }}
            echo "JAR 파일이 서버의 ${{ secrets.APP_PATH }} 경로로 복사되었습니다: ${{ secrets.JAR_NAME }}"
            echo "애플리케이션 서비스를 재시작합니다..."
            sudo systemctl restart budgets-backend.service || { echo "ERROR: 서비스 재시작 실패. 서버에서 systemctl status budgets-backend.service 명령으로 상태 확인."; exit 1; }
            echo "서비스 재시작 명령 전송 완료."
            
            sleep 10
            echo "서비스 상태를 확인합니다..."
            sudo systemctl status budgets-backend.service | head -n 10
            
            echo "--- 배포 완료 ---"
